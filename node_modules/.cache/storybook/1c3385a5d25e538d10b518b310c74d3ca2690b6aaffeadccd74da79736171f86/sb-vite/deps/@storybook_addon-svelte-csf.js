import {
  writable
} from "./chunk-XD334DBS.js";
import "./chunk-X7HCJ7ZS.js";
import "./chunk-FLKVHP3W.js";
import {
  SvelteComponentDev,
  assign,
  check_outros,
  component_subscribe,
  compute_rest_props,
  compute_slots,
  create_slot,
  detach_dev,
  dispatch_dev,
  empty,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_slot_changes,
  globals,
  group_outros,
  hasContext,
  init,
  insert_hydration_dev,
  noop,
  safe_not_equal,
  setContext,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-C4M5E6CJ.js";
import "./chunk-AK7ACWFT.js";
import "./chunk-LK32TJAX.js";

// node_modules/@storybook/addon-svelte-csf/dist/components/context.js
var CONTEXT_KEY = "storybook-registration-context";
var CONTEXT_KEY_COMPONENT = "storybook-registration-context-component";
function createRenderContext(props = {}) {
  setContext(CONTEXT_KEY, {
    render: true,
    register: () => {
    },
    meta: {},
    args: {},
    ...props
  });
  resetStoryRenderContext();
}
function useContext() {
  if (!hasContext(CONTEXT_KEY)) {
    createRenderContext();
  }
  return getContext(CONTEXT_KEY);
}
function resetStoryRenderContext() {
  setContext(CONTEXT_KEY_COMPONENT, { argsStore: writable({}), storyContextStore: writable({}) });
}
function getStoryRenderContext() {
  if (!hasContext(CONTEXT_KEY_COMPONENT)) {
    resetStoryRenderContext();
  }
  return getContext(CONTEXT_KEY_COMPONENT);
}

// node_modules/@storybook/addon-svelte-csf/dist/components/Meta.svelte
function create_fragment(ctx) {
  const block = {
    c: noop,
    l: noop,
    m: noop,
    p: noop,
    i: noop,
    o: noop,
    d: noop
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Meta", slots, []);
  useContext().meta = $$props;
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$self.$capture_state = () => ({ useContext });
  $$self.$inject_state = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$props = exclude_internal_props($$props);
  return [];
}
var Meta = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {});
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Meta",
      options,
      id: create_fragment.name
    });
  }
};
var Meta_default = Meta;

// node_modules/@storybook/addon-svelte-csf/dist/components/Story.svelte
var { Error: Error_1 } = globals;
var get_default_slot_spread_changes = (dirty) => dirty & /*$args*/
4;
var get_default_slot_changes = (dirty) => ({
  context: dirty & /*$storyContext*/
  2,
  args: dirty & /*$args*/
  4
});
var get_default_slot_context = (ctx) => ({
  .../*$args*/
  ctx[2],
  context: (
    /*$storyContext*/
    ctx[1]
  ),
  args: (
    /*$args*/
    ctx[2]
  )
});
function create_if_block(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    get_default_slot_context
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, $args, $storyContext*/
        262)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            get_default_slot_spread_changes(dirty) || !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(37:0) {#if render}",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*render*/
    ctx[0] && create_if_block(ctx)
  );
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*render*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*render*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function injectIntoPlayFunction(ctxt, play) {
  if (play && ctxt.playFunction) {
    ctxt.playFunction.__play = play;
  }
}
function instance2($$self, $$props, $$invalidate) {
  let render;
  const omit_props_names = ["name", "template", "play"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $storyContext;
  let $args;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Story", slots, ["default"]);
  const $$slots = compute_slots(slots);
  const context = useContext();
  let { name } = $$props;
  let { template = null } = $$props;
  let { play = null } = $$props;
  if (!name) {
    throw new Error("Missing Story name");
  }
  context.register({
    name,
    ...$$restProps,
    play,
    template: template != null ? template : !$$slots.default ? "default" : null
  });
  const ctx = getStoryRenderContext();
  const args = ctx.argsStore;
  validate_store(args, "args");
  component_subscribe($$self, args, (value) => $$invalidate(2, $args = value));
  const storyContext = ctx.storyContextStore;
  validate_store(storyContext, "storyContext");
  component_subscribe($$self, storyContext, (value) => $$invalidate(1, $storyContext = value));
  $$self.$$.on_mount.push(function() {
    if (name === void 0 && !("name" in $$props || $$self.$$.bound[$$self.$$.props["name"]])) {
      console.warn("<Story> was created without expected prop 'name'");
    }
  });
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(13, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("name" in $$new_props) $$invalidate(5, name = $$new_props.name);
    if ("template" in $$new_props) $$invalidate(6, template = $$new_props.template);
    if ("play" in $$new_props) $$invalidate(7, play = $$new_props.play);
    if ("$$scope" in $$new_props) $$invalidate(8, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    getStoryRenderContext,
    useContext,
    context,
    name,
    template,
    play,
    ctx,
    args,
    storyContext,
    injectIntoPlayFunction,
    render,
    $storyContext,
    $args
  });
  $$self.$inject_state = ($$new_props) => {
    if ("name" in $$props) $$invalidate(5, name = $$new_props.name);
    if ("template" in $$props) $$invalidate(6, template = $$new_props.template);
    if ("play" in $$props) $$invalidate(7, play = $$new_props.play);
    if ("render" in $$props) $$invalidate(0, render = $$new_props.render);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*name*/
    32) {
      $: $$invalidate(0, render = context.render && !context.templateName && context.storyName == name);
    }
    if ($$self.$$.dirty & /*render, $storyContext, play*/
    131) {
      $: if (render) {
        injectIntoPlayFunction($storyContext, play);
      }
    }
  };
  return [
    render,
    $storyContext,
    $args,
    args,
    storyContext,
    name,
    template,
    play,
    $$scope,
    slots
  ];
}
var Story = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, { name: 5, template: 6, play: 7 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Story",
      options,
      id: create_fragment2.name
    });
  }
  get name() {
    throw new Error_1("<Story>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set name(value) {
    throw new Error_1("<Story>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get template() {
    throw new Error_1("<Story>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set template(value) {
    throw new Error_1("<Story>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get play() {
    throw new Error_1("<Story>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set play(value) {
    throw new Error_1("<Story>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Story_default = Story;

// node_modules/@storybook/addon-svelte-csf/dist/components/Template.svelte
var get_default_slot_spread_changes2 = (dirty) => dirty & /*$args*/
2;
var get_default_slot_changes2 = (dirty) => ({
  context: dirty & /*$storyContext*/
  4,
  args: dirty & /*$args*/
  2
});
var get_default_slot_context2 = (ctx) => ({
  .../*$args*/
  ctx[1],
  context: (
    /*$storyContext*/
    ctx[2]
  ),
  args: (
    /*$args*/
    ctx[1]
  )
});
function create_if_block2(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[7].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[6],
    get_default_slot_context2
  );
  const block = {
    c: function create() {
      if (default_slot) default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot) default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, $args, $storyContext*/
        70)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[6],
            get_default_slot_spread_changes2(dirty) || !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[6]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[6],
              dirty,
              get_default_slot_changes2
            ),
            get_default_slot_context2
          );
        }
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot) default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block2.name,
    type: "if",
    source: "(16:0) {#if render}",
    ctx
  });
  return block;
}
function create_fragment3(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*render*/
    ctx[0] && create_if_block2(ctx)
  );
  const block = {
    c: function create() {
      if (if_block) if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if (if_block) if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (if_block) if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*render*/
        ctx2[0]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*render*/
          1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block2(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current) return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if (if_block) if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let render;
  let $args;
  let $storyContext;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Template", slots, ["default"]);
  const context = useContext();
  let { id = "default" } = $$props;
  context.register({ id, isTemplate: true });
  const ctx = getStoryRenderContext();
  const args = ctx.argsStore;
  validate_store(args, "args");
  component_subscribe($$self, args, (value) => $$invalidate(1, $args = value));
  const storyContext = ctx.storyContextStore;
  validate_store(storyContext, "storyContext");
  component_subscribe($$self, storyContext, (value) => $$invalidate(2, $storyContext = value));
  const writable_props = ["id"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot") console.warn(`<Template> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("id" in $$props2) $$invalidate(5, id = $$props2.id);
    if ("$$scope" in $$props2) $$invalidate(6, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    useContext,
    getStoryRenderContext,
    context,
    id,
    ctx,
    args,
    storyContext,
    render,
    $args,
    $storyContext
  });
  $$self.$inject_state = ($$props2) => {
    if ("id" in $$props2) $$invalidate(5, id = $$props2.id);
    if ("render" in $$props2) $$invalidate(0, render = $$props2.render);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*id*/
    32) {
      $: $$invalidate(0, render = context.render && context.templateId === id);
    }
  };
  return [render, $args, $storyContext, args, storyContext, id, $$scope, slots];
}
var Template = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance3, create_fragment3, safe_not_equal, { id: 5 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Template",
      options,
      id: create_fragment3.name
    });
  }
  get id() {
    throw new Error("<Template>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set id(value) {
    throw new Error("<Template>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Template_default = Template;

// node_modules/@storybook/addon-svelte-csf/dist/index.js
var _a;
if ((_a = module == null ? void 0 : module.hot) == null ? void 0 : _a.decline) {
  module.hot.decline();
}
export {
  Meta_default as Meta,
  Story_default as Story,
  Template_default as Template
};
//# sourceMappingURL=@storybook_addon-svelte-csf.js.map
